services:
  #影音娱乐
  jellyfin:
    container_name: jellyfin_qsv
    image: nyanmisaka/jellyfin:latest
    # ports:
    #   - 8096:8096
    #   - 8920:8920
    #   - 1900:1900
    #   - 7359:7359
    group_add:
      - "226"
    volumes:
      - /mnt/SDD128G/jellyfin/config:/config
      - /mnt/SDD128G/jellyfin/cache:/cache
      - /mnt/HDD12T/Media_Data_HDD/Movies:/media
      - /mnt/HDD12T/Media_Data_HDD/Teleplay:/media_TV
      - /mnt/HDD12T/Media_Data_HDD/Merry:/media_Merry
      - /mnt/HDD12T/Media_Data_HDD/YangJu:/media_YangJu
      - /mnt/HDD12T/Media_Data_HDD/Cartoon:/media_Cartoon 
      - /mnt/HDD12T/Media_Data_HDD/Missav:/media_AV 
      - /mnt/HDD12T/Media_Data_HDD/Music:/music 
      - /mnt/HDD12T/Media_Data_HDD/Books:/book 
      - /mnt/HDD12T/Media_Data_HDD/BookMp3:/bookmp3 
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    restart: 'unless-stopped'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    cpus: 0.5
    mem_limit: 4g

  xiaomusic:
    image: docker.hanxi.cc/hanxi/xiaomusic
    container_name: xiaomusic
    restart: unless-stopped
    ports:
      - 18090:18090
    volumes:
      - /mnt/HDD12T/Media_Data_HDD/Music:/app/music
      - /mnt/SDD128G/xiaomusic/conf:/app/conf
    environment:
      XIAOMUSIC_PUBLIC_PORT: 18090
      XIAOMUSIC_PORT: 18090
      XIAOMUSIC_DISABLE_HTTPAUTH: true
      
  lyricapi:
    image: hisatri/lyricapi:latest
    container_name: lyricapi
    # ports: 
    #   - 28883:28883
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /mnt/HDD12T/Media_Data_HDD/Music:/music:ro
    restart: unless-stopped

  metatube:
    image: metatube/metatube-server:latest
    container_name: metatube
      # ports:
      # - "8082:8080"
    restart: unless-stopped
    volumes:
      - /mnt/SDD128G/jellyfin/metatube:/var/run

  nextcloud:
    container_name: nextcloud
    image: nextcloud:apache
    restart: unless-stopped
    # ports: 
    #   - 8080:80
    volumes:
      - /mnt/HDD14T/mariadb_data:/var/lib/mysql
      - /mnt/HDD14T/nextcloud_data:/var/www/html/data
      - /mnt/SDD128G/nextcloud:/var/www/html
    environment:
      OVERWRITEPROTOCOL: 'https'
      OVERWRITECONDADDR: '^192\.[0-9]+\.[0-9]+\.[0-9]+$'
      TRUSTED_PROXIES: '192.168.0.0/16'
      TRUSTED_DOMAINS: 'nextcloud.xuchengcat.cn'

  photoprism:
    container_name: photoprism
    ## Use photoprism/photoprism:preview for testing preview builds:
    image: photoprism/photoprism:latest
    ## Don't enable automatic restarts until PhotoPrism has been properly configured and tested!
    ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue:
    ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
    restart: unless-stopped
    stop_grace_period: 10s
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    # ports:
    #   - "2342:2342" # HTTP port (host:container)
    environment:
      PHOTOPRISM_ADMIN_USER: "xuau"                  # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: "123456"            # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "public"                 # authentication mode (public, password)
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 85                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_DATABASE_DRIVER: "sqlite"           # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      ## Run/install on first startup (options: update https gpu tensorflow davfs clitools clean):
      # PHOTOPRISM_INIT: "https gpu tensorflow"
      ## Hardware Video Transcoding:
      # PHOTOPRISM_FFMPEG_ENCODER: "software"        # FFmpeg encoder ("software", "intel", "nvidia", "apple", "raspberry")
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
      ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
      PHOTOPRISM_UID: 1000
      PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
      TZ: "Asia/Shanghai"
    ## Start as non-root user before initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
    # user: "1000:1000"
    ## Share hardware devices with FFmpeg and TensorFlow (optional):
    # devices:
    #  - "/dev/dri:/dev/dri"                         # Intel QSV
    #  - "/dev/nvidia0:/dev/nvidia0"                 # Nvidia CUDA
    #  - "/dev/nvidiactl:/dev/nvidiactl"
    #  - "/dev/nvidia-modeset:/dev/nvidia-modeset"
    #  - "/dev/nvidia-nvswitchctl:/dev/nvidia-nvswitchctl"
    #  - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    #  - "/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools"
    #  - "/dev/video11:/dev/video11"                 # Video4Linux Video Encode Device (h264_v4l2m2m)
    working_dir: "/photoprism" # do not change or remove
    ## Storage Folders: "~" is a shortcut for your home directory, "." for the current directory
    volumes:
      # "/host/folder:/photoprism/folder"                # Example
      - "/mnt/HDD12T/Pictures:/photoprism/originals"               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      - "/mnt/HDD12T/Pictures/import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "/mnt/SDD128G/photoprism/storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
      - USER=xuau
      - PASS=123456
    volumes:
      - /mnt/SDD128G/transmission/config:/config
      - /mnt/HDD12T/Media_Data_HDD:/downloads
      - /mnt/SDD128G/transmission/watch:/watch
    network_mode: host
    restart: unless-stopped


  #智能家居
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - /mnt/SDD128G/homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
  
  node-red:
    container_name: Node_Red
    image: nodered/node-red:latest
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "1880:1880"
    volumes:
      - /mnt/SDD128G/nodered/data:/data
    restart: unless-stopped
    
  # esphome:
  #   image: ghcr.io/imagegenius/esphome:latest
  #   container_name: esphome
  #   environment:
  #     - TZ=Asia/Shanghai
  #     - ESPHOME_DASHBOARD_USE_PING=false #optional
  #   volumes:
  #     - /mnt/SDD128G/esp_home:/config
    # ports:
    #   - 6052:6052
    # restart: unless-stopped
    
  frigate:
    container_name: frigate
    restart: unless-stopped
    stop_grace_period: 30s # allow enough time to shut down the various services
    image: ghcr.io/blakeblackshear/frigate:stable
    shm_size: "512mb" # update for your cameras based on calculation above
    devices:
      # - /dev/bus/usb:/dev/bus/usb # Passes the USB Coral, needs to be modified for other versions
      - /dev/apex_0:/dev/apex_0 # Passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
      #- /dev/video11:/dev/video11 # For Raspberry Pi 4B
      - /dev/dri/renderD128:/dev/dri/renderD128 # For intel hwaccel, needs to be updated for your hardware
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /mnt/SDD128G/frigate:/config
      - /mnt/camera1t/frigate:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      - "8971:8971"
      # - "5000:5000" # Internal unauthenticated access. Expose carefully.
      # - "8554:8554" # RTSP feeds
      # - "8555:8555/tcp" # WebRTC over tcp
      # - "8555:8555/udp" # WebRTC over udp
    environment:
      - PLUS_API_KEY=93a7661b-aab9-4c20-94be-e9ec6c53029a:3c358977e302950122f6881e0ee2d03331ed9529

  # shinobi:
    # build:
    #   context: .
    #   args:
    #     SHINOBI_BRANCH: dev
    # container_name: shinobi_camera
    # volumes:
    #   - /dev/shm/ShinobiRAM:/dev/shm/streams
    #   - /mnt/SDD128G/shinobi/Shinobi:/home/Shinobi
    #   - /mnt/camera1t/videos:/home/Shinobi/videos
    # ports:
    #   - "11911:8080"
    # environment:
    #   - HOME=/home/Shinobi
  #     - DB_HOST=shinobi-sql
  #     - DB_USER=majesticflame
  #     - DB_PASSWORD=1234
  #     - DB_DATABASE=ccio
  #     - SHINOBI_UPDATE=false
  #   restart: unless-stopped

  # shinobi-sql:
  #   image: mysql:5.7
  #   container_name: mysql_for_camera
  #   volumes:
  #     - /mnt/camera1t/database:/var/lib/mysql
  #     - ./mysql-init:/docker-entrypoint-initdb.d
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=rootpassword
  #     - MYSQL_DATABASE=ccio
  #     - MYSQL_USER=majesticflame
  #     - MYSQL_PASSWORD=1234
  #   restart: unless-stopped

  #服务管理
  #no need bark any more , use https://dashboard.render.com/ instead
  # bark-server:
  #   image: finab/bark-server
  #   container_name: bark-server
  #   restart: unless-stopped
  #   volumes:
  #     - /mnt/SDD128G/bark/data:/data
  #   ports:
  #     - "18001:8080"
      
  glances:
    image: nicolargo/glances:ubuntu-latest-full
    container_name: glances
    privileged: true
      #ports:
      #- 61208:61208
    network_mode: host
    volumes:
      - /mnt/SDD128G/homepage/glances_conf:/glances/conf
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/run/user/1000/podman/podman.sock:/run/user/1000/podman/podman.sock:ro"
      - /mnt/HDD14T:/mnt/HDD14T
      - /mnt/HDD12T:/mnt/HDD12T
      - /mnt/camera1t:/mnt/camera1t
    environment:
      - TZ=Asia/Shanghai
      - "GLANCES_OPT=-C /glances/conf/glances.conf -w"
    restart: unless-stopped

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    # ports:
    #   - 3000:3000
    volumes:
      - /mnt/SDD128G/homepage/config:/app/config
      - /mnt/SDD128G/homepage/icons:/app/public/icons
      # - /mnt/HDD14T:/disk/mount/HDD14T
      - /mnt/HDD12T:/disk/mount/HDD12T
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # environment:
    #   LOG_LEVEL: "debug"
    restart: unless-stopped

  iperf3:
    image: sk278/iperf3:latest
    container_name: iperf3
    restart: unless-stopped
    ports:
      - 5201:5201/tcp
      - 5201:5201/udp

  kms-server:
    image: luodaoyi/kms-server:latest
    container_name: "kms-server"
    ports:
      - 1688:1688
    restart: always

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      # - '18081:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    volumes:
      - /mnt/SDD128G/nginx_proxy_manager/data:/data
      - /mnt/SDD128G/nginx_proxy_manager/letsencrypt:/etc/letsencrypt
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: "unless-stopped"
    # ports:
    #   - 8000:8000
    #   - 9000:9000
    #   - 9043:9043
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/SDD128G/portainer/config:/data

  zerotier:
    image: zyclonite/zerotier
    container_name: zerotier-one
    devices:
      - /dev/net/tun
    network_mode: host
    volumes:
      - '/mnt/SDD128G/zerotier/config:/var/lib/zerotier-one'
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    restart: unless-stopped

networks:
  my_docker:
    driver: bridge
